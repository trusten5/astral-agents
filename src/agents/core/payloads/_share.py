# ============================================================================== 
# _share.py â€” Shared type aliases and imports for agent responses               
# ============================================================================== 
# Purpose: Provide type aliases and import necessary response types              
# Sections: Imports, Type Aliases                                                 
# ============================================================================== 


# ============================================================================== 
# Imports                                                                        
# ============================================================================== 

# Standard Library --------------------------------------------------------------
import abc
import copy
from dataclasses import dataclass
from typing import TYPE_CHECKING, Any, Generic, Literal, TypeVar, Union

# Third-Party -------------------------------------------------------------------
from pydantic import BaseModel
from typing_extensions import TypeAlias

# OpenAI SDK - Replace w/ Astral -------------------------------------------------
from openai.types.responses import (
    Response,
    ResponseComputerToolCall,
    ResponseFileSearchToolCall,
    ResponseFunctionToolCall,
    ResponseFunctionWebSearch,
    ResponseInputItemParam,
    ResponseOutputItem,
    ResponseOutputMessage,
    ResponseOutputRefusal,
    ResponseOutputText,
    ResponseStreamEvent,
)
from openai.types.responses.response_input_item_param import (
    ComputerCallOutput,
    FunctionCallOutput,
)
from openai.types.responses.response_reasoning_item import ResponseReasoningItem

# Internal ----------------------------------------------------------------------
from exceptions import AgentsException, ModelBehaviorError

if TYPE_CHECKING:
    from agent import Agent


# ============================================================================== 
# Type Aliases                                                                  
# ============================================================================== 

TResponse: TypeAlias = Response
"""Alias for OpenAI SDK Response type."""

TResponseInputItem: TypeAlias = ResponseInputItemParam
"""Alias for OpenAI SDK ResponseInputItemParam type."""

TResponseOutputItem: TypeAlias = ResponseOutputItem
"""Alias for OpenAI SDK ResponseOutputItem type."""

TResponseStreamEvent: TypeAlias = ResponseStreamEvent
"""Alias for OpenAI SDK ResponseStreamEvent type."""

T = TypeVar("T", bound=Union[TResponseOutputItem, TResponseInputItem])

ToolCallItemTypes: TypeAlias = Union[
    ResponseFunctionToolCall,
    ResponseComputerToolCall,
    ResponseFileSearchToolCall,
    ResponseFunctionWebSearch,
]
"""Union type representing all tool call item variants."""



@dataclass
class RunItemBase(Generic[T], abc.ABC):
    """Base class for items generated by an agent run."""

    agent: "Agent[Any]"
    """Agent that generated this item."""

    raw_item: T
    """Raw response item from the run."""

    def to_input_item(self) -> TResponseInputItem:
        """
        Convert the raw item to an input item suitable for model consumption.

        Returns:
            Input item dict or model dump excluding unset fields.

        Raises:
            AgentsException: If raw_item type is unexpected.
        """
        if isinstance(self.raw_item, dict):
            # Input items are dicts; safe to ignore type here.
            return self.raw_item  # type: ignore
        if isinstance(self.raw_item, BaseModel):
            # Output items are Pydantic models convertible to input dicts.
            return self.raw_item.model_dump(exclude_unset=True)  # type: ignore
        raise AgentsException(f"Unexpected raw item type: {type(self.raw_item)}")