# ==============================================================================
# inputpayloads.py â€” Agent run input payload models
# ==============================================================================
# Purpose: Define dataclasses for agent run items representing tool calls and reasoning steps.
# Sections: Imports, Dataclasses
# ==============================================================================

# ==============================================================================
# Imports
# ==============================================================================

# Standard Library --------------------------------------------------------------
import abc
import copy
from dataclasses import dataclass
from typing import TYPE_CHECKING, Any, Generic, Literal, TypeVar, Union

# Third-Party -------------------------------------------------------------------
from pydantic import BaseModel
from typing_extensions import TypeAlias

# Internal ----------------------------------------------------------------------
from exceptions import AgentsException, ModelBehaviorError

if TYPE_CHECKING:
    from agent import Agent


# ==============================================================================
# Dataclasses
# ==============================================================================

@dataclass
class RunItemBase(Generic[T], abc.ABC):
    """Base class for items generated by an agent run."""

    agent: "Agent[Any]"
    """Agent that generated this item."""

    raw_item: T
    """Raw response item from the run."""

    def to_input_item(self) -> TResponseInputItem:
        """
        Convert the raw item to an input item suitable for model consumption.

        Returns:
            Input item dict or model dump excluding unset fields.

        Raises:
            AgentsException: If raw_item type is unexpected.
        """
        if isinstance(self.raw_item, dict):
            # Input items are dicts; safe to ignore type here.
            return self.raw_item  # type: ignore
        if isinstance(self.raw_item, BaseModel):
            # Output items are Pydantic models convertible to input dicts.
            return self.raw_item.model_dump(exclude_unset=True)  # type: ignore
        raise AgentsException(f"Unexpected raw item type: {type(self.raw_item)}")


@dataclass
class HandoffCallItem(RunItemBase[ResponseFunctionToolCall]):
    """Represents a tool call for agent handoff."""

    raw_item: ResponseFunctionToolCall
    type: Literal["handoff_call_item"] = "handoff_call_item"


@dataclass
class ToolCallItem(RunItemBase[ToolCallItemTypes]):
    """Represents a tool call such as function or computer action."""

    raw_item: ToolCallItemTypes
    type: Literal["tool_call_item"] = "tool_call_item"


@dataclass
class ReasoningItem(RunItemBase[ResponseReasoningItem]):
    """Represents a reasoning step in the agent's run."""

    raw_item: ResponseReasoningItem
    type: Literal["reasoning_item"] = "reasoning_item"
